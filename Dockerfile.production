# Production-optimized Dockerfile for Railway deployment
FROM node:20-alpine AS frontend-builder

WORKDIR /app
COPY package*.json ./
RUN npm ci --only=production --no-audit

COPY . .
RUN npm run build

# Python backend stage with optimizations
FROM python:3.11-slim AS backend-base

# Install system dependencies for browser automation and production
RUN apt-get update && apt-get install -y \
    wget \
    gnupg \
    ca-certificates \
    procps \
    curl \
    supervisor \
    nginx \
    && rm -rf /var/lib/apt/lists/*

# Install Microsoft Edge for browser automation
RUN curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg \
    && install -o root -g root -m 644 microsoft.gpg /usr/share/keyrings/ \
    && sh -c 'echo "deb [arch=amd64 signed-by=/usr/share/keyrings/microsoft.gpg] https://packages.microsoft.com/repos/edge stable main" > /etc/apt/sources.list.d/microsoft-edge-beta.list' \
    && rm microsoft.gpg \
    && apt-get update \
    && apt-get install -y microsoft-edge-stable \
    && rm -rf /var/lib/apt/lists/*

# Install Node.js for MCP servers
RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash - \
    && apt-get install -y nodejs \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy Python requirements and install dependencies
COPY backend/requirements.txt .
RUN pip install --no-cache-dir --upgrade pip \
    && pip install --no-cache-dir -r requirements.txt

# Copy backend code
COPY backend/ ./backend/
COPY --from=frontend-builder /app/.next ./frontend/.next
COPY --from=frontend-builder /app/public ./frontend/public

# Copy configuration files
COPY mcp-config.json ./
COPY railway.toml ./

# Create necessary directories
RUN mkdir -p /app/logs /app/data /app/tmp

# Copy supervisor configuration
COPY deploy/supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# Copy nginx configuration
COPY deploy/nginx.conf /etc/nginx/nginx.conf

# Create non-root user for security
RUN useradd -m -u 1000 agent \
    && chown -R agent:agent /app \
    && chown -R agent:agent /var/log/nginx \
    && chown -R agent:agent /var/lib/nginx

# Switch to non-root user
USER agent

EXPOSE 8000 3000 80

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Use supervisor to manage multiple processes
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]
